---
title: 7. Styling charts for RSS publications
format:
  html:
    code-fold: true
    code-tools: true
execute: 
  eval: false
  echo: true
editor: source
---

## Styling charts with different tools

In this section, we discuss the technical details of how to change the style of charts built with some of the most common types of software used to create data visualisations.

### R

[R](https://www.r-project.org/) is a programming language which is popular for statistical computing and graphics. There are many packages with R that can be used to create data visualisations, and we don’t aim to cover them all here. Instead, we address the most common methods: built-in base R graphics, and the {ggplot2} package.

#### Base R

R has built-in graphics capabilities that allow users to make a wide range of data visualisations without installing any additional packages. This [blog post from Jumping Rivers](https://www.jumpingrivers.com/blog/styling-base-r-graphics/) provides instructions on how to style graphics created in base R.

**Example**: changing bar chart colours in base R

To ensure the same colours are used for all base R plots created in an R session match, you can set the default colours using the `palette()` function.

```{r}
# data
plot_data <- data.frame(group = PlantGrowth$group,
                        mean_weight = ave(PlantGrowth$weight, PlantGrowth$group))
# choose colours
palette(c(rgb(155, 29, 32, maxColorValue = 255),
          rgb(61, 90, 128,  maxColorValue = 255),
          rgb(61, 128, 99, maxColorValue = 255)))

# make a bar chart
barplot(height = unique(plot_data)$mean_weight,
        names = unique(plot_data)$group,
        col = 1:3,
        main="Plant growth by treatment",
        xlab="Treatment",
        ylab = "Average weight")
```

![Bar charts visualising plant growth for different treatments with user specified colours](images/tools-bar-cols.png){fig-alt="Bar charts visualising plant growth of average hght for different treatments with user specified colours red, blue, and dark green."}

**Example**: changing the font family in base R

Within the `plot()`, `barplot()`, and `hist()`(and related base R plotting functions), the `family` argument changes which font family is used. Setting `family = “serif”` uses the default system serif font. The default setting is to use a sans serif font. You can also load a specific font family, and apply it in the same way. The code to load a specific font family may vary between operating systems. 

```{r}
# data
plot_data <- data.frame(group = PlantGrowth$group,
                        mean_weight = ave(PlantGrowth$weight, PlantGrowth$group))

# make a bar chart
barplot(height = unique(plot_data)$mean_weight,
        names = unique(plot_data)$group,
        main="Plant growth by treatment",
        xlab="Treatment",
        ylab = "Average weight",
        family = "serif")
```

![Bar charts visualising plant growth for different treatments with user specified font](images/tools-base-r-font.png){fig-alt="Bar charts visualising plant growth of average hght for different treatments with user specified serif font."}

#### {ggplot2}

{ggplot2} is an R package within the {tidyverse} framework specifically for creating data visualisations. The [package documentation](https://ggplot2.tidyverse.org/) provides guidance on how to create different types of charts. Advice on [changing the colours](https://ggplot2-book.org/scale-colour.html) and [styles](https://ggplot2-book.org/polishing.html) of {ggplot2} visualisations, can be found in the [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/index.html) book by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.

To help authors with styling their charts to fit in with the guidance in this document, we have developed an R package, [{RSSthemes}](https://github.com/nrennie/RSSthemes). We include some examples of using the package here, but encourage readers to check the GitHub repository for any updates.

We aim to add this package to CRAN in the near future, but in the meantime you can install the development version from GitHub:

```{r}
remotes::install_github("nrennie/RSSthemes")
```

**Example**: changing the non-mapped colours in {ggplot2}

```{r}
# Two charts (fill and colour)
```

**Example**: using a continuous colour scale in {ggplot2}

```{r}
# Continuous scales
```

**Example**: using a discrete colour scale in {ggplot2}

```{r}
# Discrete scales
```

Within {ggplot2}, themes allow you to control the appearance of the non-data elements of your plot.

**Example**: changing the theme in {ggplot2}

```{r}
# Theme
```

If you find a bug in the {RSSthemes} package, or something that isn’t working quite as you expected, please submit a [GitHub issue](https://github.com/nrennie/RSSthemes/issues).

### Python

[Python](https://www.python.org/) is a general-purpose programming language, with libraries available that provide capabilities for data analysis and visualisation.

#### Matplotlib

[Matplotlib](https://matplotlib.org/) is a Python library for creating static, animated, and interactive data visualisations.

**Example**: changing bar chart colours in matplotlib

```{python}
```

**Example**: changing the font family in matplotlib

```{python}
```

### Microsoft Excel

Microsoft Excel is a spreadsheet developed by Microsoft which features tools for making graphics, among other capabilities including performing calculations and statistical analysis.

**Example**: changing the colours in Microsoft Excel


**Example**: changing the colours in Microsoft Excel


## Technical details for RSS publications






















